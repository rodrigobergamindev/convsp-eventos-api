// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Event {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  status EventStatus @default(OPEN)
  openingDate DateTime
  endingDate DateTime
  openingHour String
  endingHour String
  address EventAddress?
  description String
  image EventImage?
  ticket Ticket[]
  producer Producer @relation(fields: [producerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  producerId String @db.ObjectId
}

model Ticket {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String @db.ObjectId
  title String 
  description String
  price Float
  quantity Int
  openingDate DateTime
  endingDate DateTime
  openingHour String
  endingHour String
  subscription Subscription[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([eventId, title])
}


model Subscription {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketId String @db.ObjectId
  payment Payment?
  parter Partner[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Payment {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String @db.ObjectId @unique
  status PaymentStatus @default(OPEN)
  method String
  total Float
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Producer {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  department String
  name  String
  birth DateTime
  phoneNumber String
  email String @unique
  events Event[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
 
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  type UserType @default(MEMBRO)
  rg String @unique
  cpf String @unique
  birth DateTime
  phoneNumber String
  email String @unique
  address UserAddress?
  subcription Subscription[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
 
}

model Partner {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  rg String @unique
  cpf String @unique
  birth DateTime
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String @db.ObjectId
  email String
  phoneNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

}

model EventImage {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key String @unique
  url String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String @db.ObjectId @unique
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}


model EventAddress {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  place String
  complement String?
  district String
  city String
  state String
  zip_code String
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String @db.ObjectId @unique

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

}

model UserAddress {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  place String
  complement String?
  district String
  city String
  state String
  zip_code String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

}



enum UserType {
  MEMBRO
  PASTOR
  CONVIDADO
  PRESBITERO
  DIACONO
  EVANGELISTA
  MISSIONARIO
  OUTRO
}

enum EventStatus {
  OPEN
  CLOSED
  PROGRESS
}

enum PaymentStatus {
  PAID
  OPEN
  CANCELED
  TOMATCH
}